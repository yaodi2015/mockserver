#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
// const mongoose = require("mongoose");

/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || '3000';
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
listen();
// connect()
// 	.on('error', console.log)
// 	.on('disconnected', connect)
// 	.once('open', listen);
/*
 * Handle Listen
 */
function listen() {
	server.listen(port, onListening);
	server.on('error', onError);
	// server.on('listening', onListening);
}
/*
 * Connect to mongodb
 */
// function connect() {
// 	var options = { 
// 		server: { socketOptions: { keepAlive: 1 } }
// 		// promiseLibrary: require('bluebird')
// 	};
// 	return mongoose.connect('mongodb://127.0.0.1:27017/baby_life', options).connection;
// }

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
